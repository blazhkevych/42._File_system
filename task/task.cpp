/*
	Написать рекурсивные функции, позволяющие копировать, перемещать
и удалять папки. Функции копирования и перемещения папок должны
принимать два параметра:
	1) путь к папке, которую нужно скопировать или
переместить;
	2) путь к папке, в которую нужно скопировать (переместить)
исходную папку.
	Функция удаления папки должна принимать один параметр
– путь к папке, которую необходимо удалить.
	Все три функции не должны ничего возвращать (void).
*/
/*
вместо лонг лонг взять unsigned long long в long long size = DirectorySize(pathname);

1,51,17 начало
2.25 копирование в бинарном режиме из одного места в другое
2,29,14 удаление папки
2,40 библиотечная ф-я удаления папки
2,41,15 удаление пустой папки
2,41,35 переименование/перемещение файла
2,29,44 перемещение
2,40,15 создание папки
ф-я мув 2,44,20
*/

#include <iostream>
#include <windows.h> // для MAX_PATH
#include <io.h> // для _access
#include "lib.h"

using namespace std;

int main()
{
	SetConsoleCP(1251);
	/*
	Задает кодовую страницу ввода, используемую консолью, связанной с вызывающим процессом.
	Консоль использует страницу входного кода для преобразования ввода с клавиатуры
	в соответствующее символьное значение.
	*/
	SetConsoleOutputCP(1251);
	/*
	Задает выходную кодовую страницу, используемую консолью, связанной с вызывающим процессом.
	Консоль использует свою кодовую страницу вывода для преобразования символьных значений,
	записанных различными функциями вывода, в изображения, отображаемые в окне консоли.
	*/

	char oldPath[MAX_PATH], newPath[MAX_PATH];
	char menu[][16] = {
		"1. Копировать.",
		"2. Переместить.",
		"3. Удалить." };
	while (true)
	{
		system("cls");
		Menu(menu, 3);
		/*int choice{ 0 };
		cout << "\n   >>> ";
		cin >> choice;
		cin.get();*/
		switch (1)
		{
		case 1:
			cout << "Откуда: " << endl;
			cin.getline(oldPath, MAX_PATH);
			/*
			Функция _access(char*, int) проверяет характеристики файла или папки.
				0 – существование.
				2 – доступ для чтения.
				4 – доступ для записи.
				6 – чтение / запись.
			*/
			if (_access(oldPath, 0) == -1)
			{
				cout << "Path not found\n";
				exit(0);
			}
			else
			{

			}
			cout << "Куда: " << endl;
			cin.getline(newPath, MAX_PATH);
			if (_access(oldPath, 0) == -1)
			{
				cout << "Path not found\n";
				exit(0);
			}
			CopyFolder(oldPath, newPath);
			cout << "\nКопирование завершено !" << endl;
			break;
		case 2:

			break;
		case 3:

			break;
		}
	}

	return 0;
}